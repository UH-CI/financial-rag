#!/usr/bin/env python3
"""
Fiscal Note Viewer - Flask web server for rendering fiscal note JSON files

Provides a beautiful interface for viewing fiscal notes generated by the LangGraph agent.
"""

import os
import json
import glob
import logging
from datetime import datetime
from flask import Flask, render_template, request, jsonify, abort, redirect, url_for, flash, send_file

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.secret_key = os.urandom(24)  # Required for flash messages

# Config
FISCAL_NOTES_DIR = os.path.dirname(os.path.abspath(__file__))
DEFAULT_THEME = "light"  # or "dark"

def get_fiscal_note_files():
    """Get all fiscal note JSON files in the directory with metadata"""
    pattern = os.path.join(FISCAL_NOTES_DIR, "fiscal_note_*.json")
    files = glob.glob(pattern)
    
    file_data = []
    for file_path in files:
        try:
            # Get basic file info
            filename = os.path.basename(file_path)
            mtime = os.path.getmtime(file_path)
            creation_date = datetime.fromtimestamp(mtime).strftime('%Y-%m-%d %H:%M:%S')
            
            # Try to extract a title from the file
            title = None
            bill_title = None
            try:
                with open(file_path, 'r') as f:
                    data = json.load(f)
                    # Use overview as title if it exists and isn't empty
                    if data.get('overview') and len(data.get('overview').strip()) > 0:
                        title = data.get('overview').split('.')[0]  # First sentence
                        if len(title) > 100:
                            title = title[:97] + '...'
                    
                    # Try to extract bill title if available
                    if hasattr(data, 'bill_title'):
                        bill_title = data.get('bill_title')
            except Exception as e:
                logger.warning(f"Error extracting title from {filename}: {e}")
            
            file_data.append({
                'filename': filename,
                'path': file_path,
                'mtime': mtime,
                'date': creation_date,
                'title': title or filename.replace('fiscal_note_', '').replace('.json', '').replace('_', ' '),
                'bill_title': bill_title
            })
        except Exception as e:
            logger.error(f"Error processing file {file_path}: {e}")
    
    # Sort by modification time (newest first)
    file_data.sort(key=lambda x: x['mtime'], reverse=True)
    return file_data

def load_fiscal_note(filename):
    """Load a fiscal note from a JSON file"""
    try:
        filepath = os.path.join(FISCAL_NOTES_DIR, filename)
        if not os.path.exists(filepath):
            return None
        
        with open(filepath, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error loading fiscal note {filename}: {e}")
        return None

@app.route('/')
def index():
    """Homepage that lists available fiscal notes"""
    files = get_fiscal_note_files()
    theme = request.args.get('theme', DEFAULT_THEME)
    show_all = request.args.get('show_all', 'false') == 'true'
    
    # If files exist and not explicitly showing all, redirect to the most recent one
    if files and not show_all:
        return redirect(url_for('view_fiscal_note', filename=files[0]['filename'], theme=theme))
    
    # Otherwise show the list
    return render_template('index.html', files=files, theme=theme, show_all=show_all)

@app.route('/view/<filename>')
def view_fiscal_note(filename):
    """View a specific fiscal note"""
    theme = request.args.get('theme', DEFAULT_THEME)
    fiscal_note = load_fiscal_note(filename)
    
    if not fiscal_note:
        return render_error(
            404,
            "Fiscal Note Not Found", 
            f"The requested fiscal note '{filename}' could not be found."
        )
        
    files = get_fiscal_note_files()
    
    # Find the current file in the list
    current_file = None
    for file in files:
        if file['filename'] == filename:
            current_file = file
            break
    
    # Find previous and next files for navigation
    prev_file = None
    next_file = None
    for i, file in enumerate(files):
        if file['filename'] == filename:
            if i > 0:
                next_file = files[i-1]
            if i < len(files) - 1:
                prev_file = files[i+1]
            break
    
    return render_template(
        'fiscal_note.html',
        filename=filename,
        fiscal_note=fiscal_note,
        files=files,
        current_file=current_file,
        prev_file=prev_file,
        next_file=next_file,
        theme=theme
    )

@app.route('/api/fiscal-notes')
def api_fiscal_notes():
    """API endpoint to get list of fiscal notes"""
    files = get_fiscal_note_files()
    return jsonify(files)

@app.route('/api/fiscal-note/<filename>')
def api_fiscal_note(filename):
    """API endpoint to get a specific fiscal note"""
    fiscal_note = load_fiscal_note(filename)
    
    if not fiscal_note:
        abort(404)
        
    return jsonify(fiscal_note)

@app.route('/toggle-theme')
def toggle_theme():
    """Toggle between light and dark theme"""
    current_theme = request.args.get('current', DEFAULT_THEME)
    new_theme = 'dark' if current_theme == 'light' else 'light'
    
    # Redirect back to the previous page with the new theme
    referer = request.referrer or url_for('index')
    if '?' in referer:
        # Replace theme parameter if it exists
        if 'theme=' in referer:
            referer = referer.replace(f'theme={current_theme}', f'theme={new_theme}')
        else:
            referer += f'&theme={new_theme}'
    else:
        # Add theme parameter
        referer += f'?theme={new_theme}'
    
    return redirect(referer)

@app.route('/download/<filename>')
def download_fiscal_note(filename):
    """Download a fiscal note as JSON"""
    file_path = os.path.join(FISCAL_NOTES_DIR, filename)
    
    if not os.path.exists(file_path):
        return render_error(
            404, 
            "File Not Found", 
            f"The requested file '{filename}' could not be found for download."
        )
    
    try:
        return send_file(
            file_path,
            mimetype='application/json',
            as_attachment=True,
            download_name=filename
        )
    except Exception as e:
        logger.error(f"Error downloading file {filename}: {e}")
        return render_error(
            500, 
            "Download Error", 
            f"There was an error downloading the file: {str(e)}"
        )

def render_error(error_code, error_title, error_message):
    """Render an error page"""
    theme = request.args.get('theme', DEFAULT_THEME)
    return render_template(
        'error.html',
        error_code=error_code,
        error_title=error_title,
        error_message=error_message,
        show_back_button=True,
        theme=theme
    ), error_code

@app.errorhandler(404)
def page_not_found(e):
    return render_error(
        404, 
        "Page Not Found", 
        "The requested page does not exist. Please check the URL and try again."
    )

@app.errorhandler(500)
def server_error(e):
    return render_error(
        500, 
        "Server Error", 
        "An unexpected error occurred on the server. Please try again later."
    )

@app.context_processor
def utility_processor():
    """Add utility functions to Jinja templates"""
    def format_date(date_string):
        if not date_string:
            return ""
        try:
            date_obj = datetime.fromisoformat(date_string.replace('Z', '+00:00'))
            return date_obj.strftime('%B %d, %Y at %H:%M:%S')
        except Exception:
            return date_string
            
    return dict(format_date=format_date)

if __name__ == '__main__':
    # Create templates directory if it doesn't exist
    os.makedirs(os.path.join(os.path.dirname(__file__), 'templates'), exist_ok=True)
    os.makedirs(os.path.join(os.path.dirname(__file__), 'static'), exist_ok=True)
    
    # Log startup information
    logger.info(f"Starting Fiscal Note Viewer server")
    logger.info(f"Looking for fiscal notes in: {FISCAL_NOTES_DIR}")
    fiscal_notes = get_fiscal_note_files()
    logger.info(f"Found {len(fiscal_notes)} fiscal notes")
    
    # Run the Flask app
    app.run(host='0.0.0.0', port=5002, debug=True)
